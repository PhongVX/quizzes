@startuml
actor       User
participant QuizFrontend as QFE
box "" #LightBlue
participant QuizService as QSV
queue       RabbitMQ   as RBMQ
end box

database    RedisCache as Redis
database    Database   as DB


User -> QFE : Access Quiz by entering username and quizId
User -> QFE: Click "Join"
QFE  -> QSV : Emit a websocket event "start-quiz" with username and quizId
QSV --> RBMQ: sendToQueue start-quiz with username, quizId
RBMQ  -> DB: Insert username, quizId, startTime, dueDate into the quiz_submissions table
alt Insert fails
    QSV --> QFE: Emit error event "start-quiz-confirmed" with error
    QFE -> User: Show error message
else
    DB  --> QSV: Insert successful
    QSV  --> Redis: Cache user info in Redis if it does not exist
    alt Check QuestionList by quizId
        QSV -> Redis: get questionList by quizId
    else not exist
        QSV -> DB: Query questionList by quizId in DB
        QSV -> Redis: Cache questionList by quizId into Redis
    end
    RBMQ -> Redis: Cache startTime, dueDate of the user
    QSV -> Redis: Get questionList from cache
    Redis --> QSV: questionList
    QSV --> QFE: Emit a websocket event "start-quiz-confirmed" with questionList
    alt Find leaderboard by quizId
        QSV -> Redis: get leaderboard by quizId
    else not exist
        QSV -> DB: Query leaderboard by quizId in DB
        QSV -> Redis: Cache leaderboard by quizId into Redis
    end
    QSV --> QFE: Emit a websocket event "leader-board-updated" with leaderboard data
    QFE  -> QFE : Navigate user to the quiz 
    QFE --> QFE: Display the leaderboard on UI
    QFE --> QFE: Display the questionList on UI
    QFE --> User: Please take your time and do the quiz
    User -> QFE: Select options and click "Next question"
    QFE -> QFE: Save answered question in localStorage
    User -> QFE: Done with the quiz and click "submit" button
    QFE --> QFE: Show loading spinner
    QFE -> QSV: Emit a websocket event "submit-quiz" with userId, quizId, and answer list
    QSV -> RBMQ: sendToQueue "submit-quiz"
    RBMQ --> QSV: Calculate the result of the Quiz by userId and quizId
    QSV -> Redis: Update the score in the leaderboard
    QSV -> DB: Update the Quiz result into the DB
    QSV --> Redis: Get the latest leaderboard and score
    Redis --> QSV: Latest leaderboard and score
    QSV --> QFE: Emit a websocket event "submit-quiz-confirmed" with score
    QSV --> QFE: Emit a websocket event "leader-board-updated" with leaderboard data
    QFE --> User: Show the final score and the latest leaderboard
end
@enduml